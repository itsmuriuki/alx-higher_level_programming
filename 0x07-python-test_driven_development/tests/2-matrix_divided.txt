==============================
How to use 2-matrix_divided.py
==============================

The function ``matrix_divided()`` divides all elements of a matrix by some
number that is passed in by the user

	>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
	>>> matrix = [[1, 2, 3], [4, 5, 6]

Documentation
=============

	>>> module_doc = __import__("2-matrix_divided").__doc__
	>>> print(len(module_doc) > 0)
	True

	>>> func_doc = __import__("2-matrix_divided").matrix_divided.__doc__
	>>> print(len(func_doc) > 0)
	True

Basic Division
==============
If the divisor passed in is a number, the division should happen normally

	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

	>>> matrix_divided(matrix, 1)
	[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

	>>> matrix_divided(matrix, 1.5)
	[[0.67, 1.33, 2.0], [2.67, 3.33, 4.0]]

	>>> matrix_divided(matrix, 10000)
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

	>>> matrix_divided([[1]], 6)
	[[0.17]]

	>>> matrix_divided([[1, 2, 3]], 1)
	[[1.0, 2.0, 3.0]]

	>>> matrix_divided(matrix, float('inf'))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Negative Numbers

	>>> matrix_divided(matrix, -1)
	[[-1.0, -2.0, -3.0], [-4.0, -5.0, -6.0]]

Mixed Integers and Floats

	>>> matrix = [[1, 2.2, 3], [4, 5.5, 6]]

	>>> matrix_divided(matrix, 3)
	[[0.33, 0.73, 1.0], [1.33, 1.83, 2.0]]

Error Handling
==============
Various conditions will throw errors and exceptions

	>>> matrix = [[1, 2, 3], [4, 5, 6]]

Dividing by zero

	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

If divisor is not an integer or float

	>>> matrix_divided(matrix, "Hello")
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> matrix_divided(matrix, (1, 2, 3))
	Traceback (most recent call last):
	TypeError: div must be a number

If each row is not the same size

	>>> matrix = [[1, 2, 3], [4, 5]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

	>>> matrix = [[1], [4, 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

If matrix is not a list of lists of integers or floats

	>>> matrix = [[1, 2, "Hello"], [4, 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [[1, 2, 3], ["World", 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [[1, 2, "Hello"], ["World", 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [[1, 2, (1, 2, 3)], [4, 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [[1, 2, [1, 2, 3]], ["World", 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = ((1, 2, 3), (4, 5, 6))

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = [(1, 2, 3), [4, 5, 6]]

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = []

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

	>>> matrix = None

	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats


Missing Arguments

	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

	>>> matrix_divided()
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
