===========================
How to use 0-add_integer.py
===========================

This library contains a function that adds two integers. The values provided
must be integers or floats, otherwise, TypeError exceptions will be thrown
along with subsequent error messages.

      >>> add_integer = __import__("0-add_integer").add_integer

Documentation
=============

	>>> module_doc = __import__("0-add_integer").__doc__
	>>> print(len(module_doc) > 0)
	True

	>>> func_doc = __import__("0-add_integer").add_integer.__doc__
	>>> print(len(func_doc) > 0)
	True

Integers
========

``add_integer()`` will take two arguments that must be integers and then add
them together with the ``+`` operator.

::

General number additions

	>>> add_integer(1, 2)
	3

	>>> add_integer(100, 98)
	198

Utilizing the default value of b

	  >>> add_integer(2)
	  100

Int max and min

    >>> add_integer(2147483647, 0)
    2147483647

    >>> add_integer(-2147483648, 0)
    -2147483648

    >>> add_integer(2147483647, -2147483647)
    0

    >>> add_integer(-2147483648, 2147483647)
    -1

Negative numbers

	 >>> add_integer(10, -5)
	 5

	 >>> add_integer(-5, 10)
	 5

	 >>> add_integer(-5, -5)
	 -10

	 >>> add_integer(100, -2)
	 98

Floats
======
``add_integer()`` should typecast all floats to integers before adding them

Floating point numbers

	 >>> add_integer(100.3, -2)
	 98

	 >>> add_integer(100.3, 100.3)
   	 200

	 >>> add_integer(100.32, 100.32)
	 200

TypeErrors
==========
If a or b are not integers, a TypeError should be thrown

	  >>> add_integer(4, "School")
	  Traceback (most recent call last):
	  TypeError: b must be an integer

	  >>> add_integer("School", 4)
	  Traceback (most recent call last):
	  TypeError: a must be an integer

	  >>> add_integer("DHK", "School")
	  Traceback (most recent call last):
	  TypeError: a must be an integer

	  >>> add_integer([1, 2, 3], 4)
	  Traceback (most recent call last):
	  TypeError: a must be an integer

	  >>> add_integer((1, 2, 3), 4)
	  Traceback (most recent call last):
	  TypeError: a must be an integer

If None is provided as input

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

Infinity

	>>> add_integer(float('inf'), 2)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(2, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(-float('inf'), 5)
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(float('NaN'), 5)
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
